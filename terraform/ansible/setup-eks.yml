---

- name: "deploy microservices" 
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_host_key_checking: false
    - ansible_stdout_callback: yaml
    - ACCOUNT_ID:
    - CLUSTER_NAME:
    - REGION:
    - PROFILE:
    

  pre_tasks:
    - name: "wait 600 seconds for target connection to become reachable/usable."
      wait_for_connection:
        timeout: 600

  tasks:

  - name: "update kubeconfig"
    shell: |  
         aws eks update-kubeconfig --profile {{ PROFILE }} --name {{ CLUSTER_NAME }} --region {{ REGION }}
 
  - name: "install aws iam-oidc-provider"
    shell: |  
          eksctl utils associate-iam-oidc-provider \
          --profile {{ PROFILE }} \
          --region {{ REGION }} \
          --cluster {{ CLUSTER_NAME }} \
          --approve


  - name: "create IAM Policy for AWS EBS CSI Controller"
    shell: |
          aws iam detach-role-policy \
            --role-name AWSLoadBalancerControllerIAMPolicyNew \
            --policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AmazonEBSCSIDriverPolicyNew

          aws iam delete-policy \
            --policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AmazonEBSCSIDriverPolicyNew  
          aws iam create-policy \
          --profile {{ PROFILE }} \
          --region {{ REGION }} \
          --policy-name AmazonEBSCSIDriverPolicyNew \
          --policy-document file://ebs-csi-iam-policy.json

  - name: "create eks service account for ebs-csi"
    shell: |
          eksctl delete iamserviceaccount \
            --profile {{ PROFILE }} \
            --region {{ REGION }} \
            --cluster {{ CLUSTER_NAME }} \
            --namespace kube-system \
            --name ebs-csi-controller-sa

          eksctl create iamserviceaccount \
            --name ebs-csi-controller-sa \
            --namespace kube-system \
            --profile {{ PROFILE }} \
            --cluster {{ CLUSTER_NAME }} \
            --attach-policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AmazonEBSCSIDriverPolicyNew \
            --approve \
            --role-only \
            --role-name AmazonEKS_EBS_CSI_DriverRole


  - name: "add addons to the cluster"
    shell: |
          eksctl create addon \
            --profile {{ PROFILE }} \
            --region {{ REGION }} \
            --cluster {{ CLUSTER_NAME }} \
            --name aws-ebs-csi-driver \
            --service-account-role-arn=arn:aws:iam::{{ ACCOUNT_ID }}:role/AmazonEKS_EBS_CSI_DriverRole

  - name: "create IAM Policy for AWS balancer controller"
    shell: |
          curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
          aws iam detach-role-policy \
            --role-name AWSLoadBalancerControllerIAMPolicyNew \
            --policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicyNew

          aws iam delete-policy \
            --policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicyNew
            
          aws iam create-policy \
            --profile {{ PROFILE }} \
            --region {{ REGION }} \
            --policy-name AWSLoadBalancerControllerIAMPolicyNew \
            --policy-document file://iam-policy.json
    register: out
    failed_when: "out.rc != 0 and 'EntityAlreadyExists' not in out.stderr"
     
  - name: "install AWS load balancer controller on eks"
    shell: |
          eksctl delete iamserviceaccount \
            --profile {{ PROFILE }} \
            --region {{ REGION }} \
            --cluster {{ CLUSTER_NAME }} \
            --namespace kube-system \
            --name aws-load-balancer-controller
            
          eksctl create iamserviceaccount \
            --profile {{ PROFILE }} \
            --region {{ REGION }} \
            --cluster {{ CLUSTER_NAME }} \
            --namespace kube-system \
            --name aws-load-balancer-controller \
            --role-name "AWSLoadBalancerControllerIAMPolicyNew" \
            --attach-policy-arn arn:aws:iam::{{ ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicyNew \
            --override-existing-serviceaccounts \
            --approve

  - name: "install AWS load balancer ingress controller on eks"
    shell: |  
          helm repo add {{ CLUSTER_NAME }} https://aws.github.io/eks-charts
          helm repo update
          helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName={{ CLUSTER_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

  - name: "install ingress nginx controller on eks"
    shell: |
          helm upgrade -i ingress-nginx ingress-nginx/ingress-nginx --namespace kube-system --values nginx-ingress-values.yml

  - namkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echoe: "deploy default ingress for apps"
    shell: |  
          kubectl create namespace apps
          kubectl apply -f apps_ingress.yml

  - name: "install jenkins with values on eks"
    shell: |
          helm repo add jenkins https://charts.jenkins.io
          helm upgrade -i jenkins jenkins/jenkins --namespace apps --values ../../jenkins/jenkins_values.yaml

  - name: "install argocd on eks"
    shell: |  
          # kubectl create namespace argocd
          kubectl apply -n apps -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  #         

    # register: out
    # failed_when: "out.rc != 0 and 'EntityAlreadyExists' not in out.stderr"

  # - name: "install ebs csi controller"
  #   shell: |
  #         helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
  #         helm repo update
  #         helm upgrade --install aws-ebs-csi-driver \
  #         --namespace kube-system \
  #         aws-ebs-csi-driver/aws-ebs-csi-driver